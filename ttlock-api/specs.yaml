openapi: 3.0.0
info:
  version: 3.0.0
  title: TTLock API
tags:
  - name: OAuth
    description: OAuth
    externalDocs:
      description: Find out more
      url: https://euopen.ttlock.com/doc/oauth2
  - name: Lock
    description: Lock
    externalDocs:
      description: Find out more
      url: https://euopen.ttlock.com/doc/api/v3/lock/initialize
paths:
  /oauth2/token:
    post:
      tags:
        - OAuth
      summary: Get/Refresh Credentials
      description: |- 
       Cloud APIs grant access by OAuth 2.0 's Resource Owner Password grant type，you have to request with username and password，all the cloud apis should be requested with access token.
       
       Alert：access token returned will expire in seconds of expires_in，request with expired access token will get 10004 error code，you should get a new token with this API, or Refresh the access token.
       
       When access token expired, you can refresh it by this api, the refresh_token is returned by Get Access Token, the valid period of refresh token is 10 years since it's created.
      operationId: getToken
      requestBody:
        $ref: "#/components/requestBodies/GetToken"
      responses:
        "200":
          description: Request succeeded
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Credentials"
                  - $ref: "#/components/schemas/Error"
  /v3/lock/list:
    get:
      tags:
        - Lock
      summary: Get the lock list of an account
      description: |- 
        List locks added by you，no matter it is added by TTLock APP or added by APP SDK and initialized by cloud API: Lock init

        If your locks were added by TTLock APP，request this API with the access token get  with the username and password of the user account you login TTLock APP.

        If your locks were initialized by cloud API:Lock init, request with the same access token when init the lock.

        This API will only return locks which you are top administrator. Ekeys others shared to you can be queried by cloud API: ekey list.
      operationId: listLocks
      security:
        - oAuth2: [] 
      parameters:
        - $ref: "#/components/parameters/ClientId"
        - $ref: "#/components/parameters/AccessToken"
        - in: query
          name: lockAlias
          schema:
            type: string
          description: "Search by lock alias, fuzzy matching"
        - in: query
          name: groupId
          schema:
            type: integer
            format: int32
          description: "Group ID，search by group, refer to: Add group for detail"
        - in: query
          name: pageNo
          schema:
            type: integer
            format: int32
          description: "Page no, start from 1"
          required: true
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
          description: "Items per page, default 20, max 1000"
          required: true
        - in: query
          name: date
          schema:
            type: integer
            format: int64
          description: "Current time (timestamp in millisecond)"
          required: true
      responses:
        "200":
          description: Request succeeded
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - allOf:
                    - $ref: "#/components/schemas/PaginationInfo"
                    - type: object
                      properties:
                        list:
                          type: array
                          items:
                            $ref: "#/components/schemas/Lock"
  /v3/lock/queryOpenState:
    get:
      tags:
        - Lock
      summary: Get the open state of a lock
      description: |- 
        Get the open state of a lock via gateway or WiFi lock.
      operationId: getLockOpenState
      security:
        - oAuth2: [] 
      parameters:
        - $ref: "#/components/parameters/ClientId"
        - $ref: "#/components/parameters/AccessToken"
        - in: query
          name: lockId
          schema:
            type: integer
            format: int32
          description: "Lock ID, generated by Lock init"
          required: true
        - in: query
          name: date
          schema:
            type: integer
            format: int64
          description: "Current time (timestamp in millisecond)"
          required: true
      responses:
        "200":
          description: Request succeeded
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                  - type: object
                    properties:
                      list:
                        type: array
                        items:
                          $ref: "#/components/schemas/LockOpenState"
  /v3/lock/lock:
    post:
      tags:
        - Lock
      summary: Lock the lock
      description: |- 
        Lock the lock remotely via gateway or WiFi lock.
      operationId: postLock
      security:
        - oAuth2: [] 
      requestBody:
        $ref: "#/components/requestBodies/Lock"
      responses:
        "200":
          description: Request succeeded
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
  /v3/lock/unlock:
    post:
      tags:
        - Lock
      summary: Unlock the lock
      description: |- 
        Unlock via gateway or WiFi lock, if get -4043(The function is not supported for this lock) error message, please switch the "remote unlock" on in TTLock APP's lock setting page.
      operationId: postUnlock
      security:
        - oAuth2: [] 
      requestBody:
        $ref: "#/components/requestBodies/Lock"
      responses:
        "200":
          description: Request succeeded
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error"
                          
externalDocs:
  description: Find out more about TTLock
  url: https://euopen.ttlock.com/doc
servers:
  - url: https://euapi.ttlock.com
  - url: https://cnapi.ttlock.com
components:
  securitySchemes:
    oAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: /oauth2/token
          scopes: {}
  requestBodies:
    GetToken:
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            required:
              - clientId
              - clientSecret
            anyOf:
              - required:
                - username
                - password
              - required:
                - grant_type
                - refresh_token
            properties:
              clientId:
                type: string
                description: "clientId from Create application"
              clientSecret:
                type: string
                description: "clientSecret from Create application"
              username:
                type: string
                description: "username you used to login ttlock APP or TTLock APP，or The prefixed username return by cloud api: User register. Notice：please do not use your open platform's developer account."
              password:
                type: string
                description: "Password(32 chars, low case, md5 encrypted)"
              grant_type:
                type: string
                description: "grant type, value: refresh_token"
                enum: ["refresh_token"]
              refresh_token:
                type: string
                description: "refresh token"
      description: OAuth token request/refresh
      required: true
    Lock:
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            required:
              - clientId
              - accessToken
              - lockId
              - date
            properties:
              clientId:
                type: string
                description: "clientId from Create application"
              accessToken:
                type: string
                description: "Access token，refer to: Get access token"
              lockId:
                type: integer
                format: int32
                description: "Lock ID, generated by Lock init"
              date:
                type: integer
                format: int64
                description: "Lock init time (timestamp in millisecond)"
      description: OAuth token request/refresh
      required: true
  parameters:
    ClientId:
      in: query
      name: clientId
      description: "clientId from Create application"
      schema:
        type: string
      required: true
    AccessToken:
      in: query
      name: accessToken
      description: "Access token，refer to: Get access token"
      schema:
        type: string
      required: true
  schemas:
    PaginationInfo:
      type: object
      properties:
        pageNo:
          type: integer
          format: int32
          description: "Page no, start from 1"
        pageSize:
          type: integer
          format: int32
          description: "Items per page, default 20, max 10000"
        pages:
          type: integer
          format: int32
          description: "Total number of pages"
        total:
          type: integer
          format: int32
          description: "Total number of records"
    Lock:
      type: object
      required:
        - lockId
        - lockName
        - lockAlias
      properties:
        lockId:
          type: integer
          format: int32
          description: "Lock ID, generated by Lock init"
        lockName:
          type: string
          description: "Lock name"
        lockAlias:
          type: string
          description: "Lock alias"
        lockMac:
          type: string
          description: "Lock MAC"
        electricQuantity:
          type: integer
          format: int32
          description: "Lock battery"
        featureValue:
          type: string
          description: "characteristic value. it is used to indicate what kinds of feature do a lock support."
        hasGateway:
          type: integer
          format: int32
          description: "Is the lock binded to gateway:1-yes, 0-no"
        lockData:
          type: string
          description: "Lock data, used to operate the lock"
        groupId:
          type: integer
          format: int32
          description: "Group id"
        groupName:
          type: string
          description: "Group name"
        date:
          type: integer
          format: int64
          description: "Lock init time (timestamp in millisecond)"
          
    LockOpenState:
      type: object
      properties:
        state:
          type: integer
          format: int32
          description: "Open state of lock:0-locked,1-unlocked,2-unknown"
      
    Credentials:
      type: object
      required:
        - access_token
        - refresh_token
        - expires_in
        - uid
      properties:
        access_token:
          type: string
          description: "Access token"
          example: "39caac89b0b51c980aa61ad4264b693b"
        uid:
          type: integer
          format: int32
          description: "User id"
          example: 2340
        expires_in:
          type: integer
          format: int32
          description: "Expire time of access token, in second."
          example: 7776000
        refresh_token:
          type: string
          description: "Refresh token"
          example: "1bd2a21a7df889630f444364813738d7"
    Error:
      type: object
      required:
        - errmsg
      properties:
        errmsg:
          type: string
          description: "Error message"
          example: "invalid account or invalid password"
        errcode:
          type: integer
          format: int32
          description: "Error code"
          example: 10007
        description:
          type: string
          description: "Error description"
          example: "usernamepassword"